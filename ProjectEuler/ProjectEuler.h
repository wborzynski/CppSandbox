/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/* 
 * File:   ProjectEuler.h
 * Author: W
 *
 * Created on October 25, 2017, 11:26 PM
 */

#ifndef PROJECTEULER_H
#define PROJECTEULER_H

#include <vector>
#include <math.h>
#include <algorithm>
#include <string>

class ProjectEuler
{
    public:
        /*
         * Problem 1
         * Multiples of 3 and 5
         * If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
         * Find the sum of all the multiples of 3 or 5 below 1000. 
         */
        static int SumOfMultiplesUnder(int a, int b, int max)
        {
            int sum;

            sum = SumOfMultiplesUnder(a, max) + SumOfMultiplesUnder(b, max) - SumOfMultiplesUnder(a*b, max);
        }
        
        static int SumOfMultiplesUnder(int n, int max)
        {
            int sum = 0;
            for(int i = 1; i*n < max; ++i)
            {
                sum+= i*n;
            }
            return sum;
        }
        
        /*
         * Problem 2 
         * Even Fibonacci numbers
         * 
         * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
         * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
         * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
         */
        static int EvenFibonacciNumbersUnder(int n)
        {
            int i1 = 1;
            int i2 = 2;
            int sumEvens = 0;
            
            std::cout << i1 <<std::endl;
                
            while(i2 < n)
            {
                if(i2 % 2 == 0)
                    sumEvens+=i2;
                
                int tmp = i1;
                i1 = i2;
                i2 = tmp + i2;
            }
            return sumEvens;
        }
        
        /*
         * Problem 3 
         * The prime factors of 13195 are 5, 7, 13 and 29.
         * What is the largest prime factor of the number 600851475143 ?
         */
        static void GetPrimeFactors(long int n, std::vector<int>& primes)
        {
            while(n%2 == 0)
            {
                n = n/2;
            }
            
            for(int i=3; i < std::sqrt(n); i++)
            {
                while(n%i == 0)
                {
                    primes.push_back(i);
                    n = n / i;
                }
            } 
            if(n > 2)
                primes.push_back(n);
        }
        
        /*
         * Problem 4
         * Largest palindrome product
         * A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.
         * Find the largest palindrome made from the product of two 3-digit numbers. 
         */
        
        static int LargestPalindrome()
        {
            int n = 999 * 999;
            
            while(n > 100 * 100)
            {
                if(isPalindrome(n))
                {
                    int multiplier = 999;
                    while(multiplier > 100)
                    {
                        if(n % multiplier == 0)
                        {
                            int m2 = n / multiplier;
                            if(m2 <= 999 && m2 >= 100)
                                return n;
                        }
                        multiplier--; 
                    }
                }
                n--;
            }
            return n;
        }
        
        //There's probably a better way to do this check without converting to strings...
        static bool isPalindrome(int n)
        {
            bool isPalindrome = true;
            std::string s = std::to_string(n);
            
            auto itBegin = s.begin();
            //pre-decrement end  pointer, as this points at the null string terminator
            auto itEnd = --s.end();
            
            while(itBegin < itEnd)
            {
                if(*itBegin != *itEnd)
                {
                    isPalindrome = false;
                    break;
                }
                itBegin++;
                itEnd--;
            }
            return isPalindrome;
            
        }
        
};

#endif /* PROJECTEULER_H */

